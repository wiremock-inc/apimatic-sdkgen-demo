/**
 * Train Travel APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { lazy, number, object, optional, Schema, string } from '../schema';
import {
  BookingsPaymentResponseSource,
  bookingsPaymentResponseSourceSchema,
} from './containers/bookingsPaymentResponseSource';
import { CurrencyEnum, currencyEnumSchema } from './currencyEnum';
import { LinksBooking, linksBookingSchema } from './linksBooking';
import { StatusEnum, statusEnumSchema } from './statusEnum';

export interface BookingsPaymentResponse {
  /** Unique identifier for the payment. This will be a unique identifier for the payment, and is used to reference the payment in other objects. */
  id?: string;
  /** Amount intended to be collected by this payment. A positive decimal figure describing the amount to be collected. */
  amount?: number;
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. */
  currency?: CurrencyEnum;
  /** The payment source to take the payment from. This can be a card or a bank account. Some of these properties will be hidden on read to protect PII leaking. */
  source?: BookingsPaymentResponseSource;
  /** The status of the payment, one of `pending`, `succeeded`, or `failed`. */
  status?: StatusEnum;
  links?: LinksBooking;
}

export const bookingsPaymentResponseSchema: Schema<BookingsPaymentResponse> = object(
  {
    id: ['id', optional(string())],
    amount: ['amount', optional(number())],
    currency: ['currency', optional(currencyEnumSchema)],
    source: ['source', optional(bookingsPaymentResponseSourceSchema)],
    status: ['status', optional(statusEnumSchema)],
    links: ['links', optional(lazy(() => linksBookingSchema))],
  }
);
