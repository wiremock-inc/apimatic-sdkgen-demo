/**
 * Train Travel APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { TripsResponse, tripsResponseSchema } from '../models/tripsResponse';
import { boolean, optional, string } from '../schema';
import { BaseController } from './baseController';
import { ProblemError } from '../errors/problemError';

export class TripsController extends BaseController {
  /**
   * Returns a list of available train trips between the specified origin and destination stations on the
   * given date, and allows for filtering by bicycle and dog allowances.
   *
   *
   * @param origin      The ID of the origin station
   * @param destination The ID of the destination station
   * @param date        The date and time of the trip in ISO 8601 format in origin station's timezone.
   * @param bicycles    Only return trips where bicycles are known to be allowed
   * @param dogs        Only return trips where dogs are known to be allowed
   * @return Response from the API call
   */
  async getTrips(
    origin: string,
    destination: string,
    date: string,
    bicycles?: boolean,
    dogs?: boolean,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<TripsResponse>> {
    const req = this.createRequest('GET', '/trips');
    const mapped = req.prepareArgs({
      origin: [origin, string()],
      destination: [destination, string()],
      date: [date, string()],
      bicycles: [bicycles, optional(boolean())],
      dogs: [dogs, optional(boolean())],
    });
    req.query('origin', mapped.origin);
    req.query('destination', mapped.destination);
    req.query('date', mapped.date);
    req.query('bicycles', mapped.bicycles);
    req.query('dogs', mapped.dogs);
    req.throwOn(400, ProblemError, 'Bad Request');
    req.throwOn(401, ProblemError, 'Unauthorized');
    req.throwOn(403, ProblemError, 'Forbidden');
    req.throwOn(429, ProblemError, 'Too Many Requests');
    req.throwOn(500, ProblemError, 'Internal Server Error');
    req.authenticate([{ oAuth2: true }]);
    return req.callAsJson(tripsResponseSchema, requestOptions);
  }
}
