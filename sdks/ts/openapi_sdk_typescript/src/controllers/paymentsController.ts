/**
 * Train Travel APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { BookingPayment, bookingPaymentSchema } from '../models/bookingPayment';
import {
  BookingsPaymentResponse,
  bookingsPaymentResponseSchema,
} from '../models/bookingsPaymentResponse';
import { string } from '../schema';
import { BaseController } from './baseController';
import { ProblemError } from '../errors/problemError';

export class PaymentsController extends BaseController {
  /**
   * A payment is an attempt to pay for the booking, which will confirm the booking for the user and
   * enable them to get their tickets.
   *
   * @param bookingId    The ID of the booking to pay for.
   * @param body
   * @return Response from the API call
   */
  async createBookingPayment(
    bookingId: string,
    body: BookingPayment,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<BookingsPaymentResponse>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      bookingId: [bookingId, string()],
      body: [body, bookingPaymentSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/bookings/${mapped.bookingId}/payment`;
    req.throwOn(400, ProblemError, 'Bad Request');
    req.throwOn(401, ProblemError, 'Unauthorized');
    req.throwOn(403, ProblemError, 'Forbidden');
    req.throwOn(429, ProblemError, 'Too Many Requests');
    req.throwOn(500, ProblemError, 'Internal Server Error');
    req.authenticate([{ oAuth2: true }]);
    return req.callAsJson(bookingsPaymentResponseSchema, requestOptions);
  }
}
